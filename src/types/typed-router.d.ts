/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '404': RouteRecordInfo<'404', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    'MyApproval': RouteRecordInfo<'MyApproval', '/basic/approval', Record<never, never>, Record<never, never>>,
    'Charts': RouteRecordInfo<'Charts', '/charts', Record<never, never>, Record<never, never>>,
    'Counter': RouteRecordInfo<'Counter', '/counter', Record<never, never>, Record<never, never>>,
    'Home': RouteRecordInfo<'Home', '/home', Record<never, never>, Record<never, never>>,
    'KeepAlive': RouteRecordInfo<'KeepAlive', '/keepalive', Record<never, never>, Record<never, never>>,
    'Login': RouteRecordInfo<'Login', '/login', Record<never, never>, Record<never, never>>,
    'Mock': RouteRecordInfo<'Mock', '/mock', Record<never, never>, Record<never, never>>,
    'Profile': RouteRecordInfo<'Profile', '/profile', Record<never, never>, Record<never, never>>,
    'ScrollCache': RouteRecordInfo<'ScrollCache', '/scroll-cache', Record<never, never>, Record<never, never>>,
    'Settings': RouteRecordInfo<'Settings', '/settings', Record<never, never>, Record<never, never>>,
    'UnoCSS': RouteRecordInfo<'UnoCSS', '/unocss', Record<never, never>, Record<never, never>>,
    'Workbench': RouteRecordInfo<'Workbench', '/workbench', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/[...all].vue': {
      routes: '404'
      views: never
    }
    'src/pages/basic/approval/index.vue': {
      routes: 'MyApproval'
      views: never
    }
    'src/pages/charts/index.vue': {
      routes: 'Charts'
      views: never
    }
    'src/pages/counter/index.vue': {
      routes: 'Counter'
      views: never
    }
    'src/pages/home/index.vue': {
      routes: 'Home'
      views: never
    }
    'src/pages/keepalive/index.vue': {
      routes: 'KeepAlive'
      views: never
    }
    'src/pages/login/index.vue': {
      routes: 'Login'
      views: never
    }
    'src/pages/mock/index.vue': {
      routes: 'Mock'
      views: never
    }
    'src/pages/profile/index.vue': {
      routes: 'Profile'
      views: never
    }
    'src/pages/scroll-cache/index.vue': {
      routes: 'ScrollCache'
      views: never
    }
    'src/pages/settings/index.vue': {
      routes: 'Settings'
      views: never
    }
    'src/pages/unocss/index.vue': {
      routes: 'UnoCSS'
      views: never
    }
    'src/pages/workbench/index.vue': {
      routes: 'Workbench'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
